'use server';

/**
 * SISTEMA DE AUTOMAÇÃO DE IA - ECONOMIA DE CRÉDITOS
 * 
 * Este serviço implementa um sistema inteligente que gera automaticamente:
 * - Dicas de gastos mensais
 * - Perfil financeiro 
 * - Relatórios mensais e anuais
 * - Previsões de saldo
 * 
 * REGRAS:
 * 1. Geração automática ocorre 1x por mês (dia 1) para cada usuário
 * 2. Dados são salvos no banco e consultados de lá
 * 3. NÃO CONSOME CRÉDITOS quando é automático
 * 4. Consome créditos apenas quando usuário força refresh
 * 5. Se não existir dados salvos, gera na primeira consulta sem consumir créditos
 */

import { connectToDatabase } from '@/lib/mongodb';
import { ObjectId } from 'mongodb';
import { Transaction } from '@/lib/types';
import { getSpendingTip, getFinancialProfile, generateMonthlyReportAction, generateAnnualReportAction, predictFutureBalanceAction } from './ai-actions';

interface AutoGeneratedData {
  _id?: ObjectId;
  userId: string;
  type: 'spending_tip' | 'financial_profile' | 'monthly_report' | 'annual_report' | 'future_balance';
  data: any;
  generatedAt: Date;
  month: number; // 1-12
  year: number;
}

/**
 * Verifica se já existe dado gerado para o mês atual
 */
async function hasDataForCurrentMonth(userId: string, type: string): Promise<boolean> {
  const { db } = await connectToDatabase();
  const now = new Date();
  const currentMonth = now.getMonth() + 1;
  const currentYear = now.getFullYear();

  const existingData = await db.collection('ai_generated_data').findOne({
    userId,
    type,
    month: currentMonth,
    year: currentYear
  });

  return !!existingData;
}

/**
 * Salva dado gerado automaticamente
 */
async function saveGeneratedData(userId: string, type: string, data: any, replaceExisting: boolean = false): Promise<void> {
  const { db } = await connectToDatabase();
  const now = new Date();
  const currentMonth = now.getMonth() + 1;
  const currentYear = now.getFullYear();

  if (replaceExisting) {
    // Remove dados antigos do mesmo tipo quando é ação do usuário
    await db.collection('ai_generated_data').deleteMany({
      userId,
      type
    });
  }

  await db.collection('ai_generated_data').insertOne({
    userId,
    type,
    data,
    generatedAt: now,
    month: currentMonth,
    year: currentYear
  });
}

/**
 * Busca dado gerado mais recente
 */
async function getLatestGeneratedData(userId: string, type: string): Promise<any | null> {
  const { db } = await connectToDatabase();

  const latestData = await db.collection('ai_generated_data')
    .findOne(
      { userId, type },
      { sort: { generatedAt: -1 } }
    );

  return latestData?.data || null;
}

/**
 * Gera dica de gastos inteligente (sem consumir créditos quando automático)
 */
export async function getSmartSpendingTip(transactions: Transaction[], userId: string, forceRefresh: boolean = false): Promise<string> {
  // Se forçar refresh, usa a função normal que consome créditos
  if (forceRefresh) {
    const tip = await getSpendingTip(transactions, userId, true);

    // Salva para usar como cache, substituindo dados antigos
    await saveGeneratedData(userId, 'spending_tip', tip, true);
    return tip;
  }

  // Verifica se já tem dica gerada este mês
  const cachedTip = await getLatestGeneratedData(userId, 'spending_tip');
  if (cachedTip) {
    return cachedTip;
  }

  // Se não tem, gera primeira vez sem consumir créditos
  const tip = await getSpendingTip(transactions, userId, false);
  await saveGeneratedData(userId, 'spending_tip', tip, false);
  return tip;
}

/**
 * Gera perfil financeiro inteligente (sem consumir créditos quando automático)
 */
export async function getSmartFinancialProfile(
  input: any,
  userId: string,
  forceRefresh: boolean = false
): Promise<any> {
  // Se forçar refresh, usa a função normal que consome créditos
  if (forceRefresh) {
    const profile = await getFinancialProfile(input, userId, true);

    // Salva para usar como cache, substituindo dados antigos
    await saveGeneratedData(userId, 'financial_profile', profile, true);
    return profile;
  }

  // Verifica se já tem perfil gerado este mês
  const cachedProfile = await getLatestGeneratedData(userId, 'financial_profile');
  if (cachedProfile) {
    return cachedProfile;
  }

  // Se não tem, gera primeira vez sem consumir créditos
  const profile = await getFinancialProfile(input, userId, false);
  await saveGeneratedData(userId, 'financial_profile', profile, false);
  return profile;
}

/**
 * Gera relatório mensal inteligente (sem consumir créditos quando automático)
 */
export async function getSmartMonthlyReport(
  input: any,
  userId: string,
  forceRefresh: boolean = false
): Promise<any> {
  // Se forçar refresh, usa a função normal que consome créditos
  if (forceRefresh) {
    const report = await generateMonthlyReportAction(input, userId, false);

    // Salva para usar como cache
    await saveGeneratedData(userId, 'monthly_report', report);
    return report;
  }

  // Verifica se já tem relatório gerado este mês
  const cachedReport = await getLatestGeneratedData(userId, 'monthly_report');
  if (cachedReport) {
    return cachedReport;
  }

  // Se não tem, gera primeira vez sem consumir créditos (isFreeAction = true)
  const report = await generateMonthlyReportAction(input, userId, true);
  await saveGeneratedData(userId, 'monthly_report', report);
  return report;
}

/**
 * Gera relatório anual inteligente (sem consumir créditos quando automático)
 */
export async function getSmartAnnualReport(
  input: any,
  userId: string,
  forceRefresh: boolean = false
): Promise<any> {
  // Se forçar refresh, usa a função normal que consome créditos
  if (forceRefresh) {
    const report = await generateAnnualReportAction(input, userId, false);

    // Salva para usar como cache
    await saveGeneratedData(userId, 'annual_report', report);
    return report;
  }

  // Verifica se já tem relatório gerado este ano
  const cachedReport = await getLatestGeneratedData(userId, 'annual_report');
  if (cachedReport) {
    return cachedReport;
  }

  // Se não tem, gera primeira vez sem consumir créditos (isFreeAction = true)
  const report = await generateAnnualReportAction(input, userId, true);
  await saveGeneratedData(userId, 'annual_report', report);
  return report;
}

/**
 * Gera previsão de saldo inteligente (sem consumir créditos quando automático)
 */
export async function getSmartFutureBalance(
  input: any,
  userId: string,
  forceRefresh: boolean = false
): Promise<any> {
  // Se forçar refresh, usa a função normal que consome créditos
  if (forceRefresh) {
    const prediction = await predictFutureBalanceAction(input, userId, true);

    // Salva para usar como cache
    await saveGeneratedData(userId, 'future_balance', prediction);
    return prediction;
  }

  // Verifica se já tem previsão gerada este mês
  const cachedPrediction = await getLatestGeneratedData(userId, 'future_balance');
  if (cachedPrediction) {
    return cachedPrediction;
  }

  // Se não tem, gera primeira vez sem consumir créditos
  const prediction = await predictFutureBalanceAction(input, userId, false);
  await saveGeneratedData(userId, 'future_balance', prediction);
  return prediction;
}

/**
 * Job automático que roda mensalmente para gerar dados de IA
 * Este deveria ser chamado por um cron job ou similar
 */
export async function generateMonthlyAIData(userId: string, transactions: Transaction[]): Promise<void> {
  try {
    console.log(`[AI Automation] Generating monthly data for user ${userId}`);

    // Gera dica de gastos automática (sem consumir créditos)
    await getSmartSpendingTip(transactions, userId, false);

    // Gera perfil financeiro automático (sem consumir créditos)
    const profileInput = {
      currentMonthTransactions: JSON.stringify(transactions, null, 2),
      monthlyReports: "[]", // Pode buscar relatórios anteriores
      annualReports: "[]"   // Pode buscar relatórios anteriores
    };
    await getSmartFinancialProfile(profileInput, userId, false);

    // Gera relatório mensal automático (sem consumir créditos)
    const reportInput = {
      transactions: JSON.stringify(transactions, null, 2),
      month: new Date().getMonth() + 1,
      year: new Date().getFullYear()
    };
    await getSmartMonthlyReport(reportInput, userId, false);

    // Gera previsão de saldo automática (sem consumir créditos)
    const balanceInput = {
      transactions: JSON.stringify(transactions, null, 2),
      currentBalance: transactions.reduce((sum, t) => sum + (t.type === 'income' ? t.amount : -t.amount), 0)
    };
    await getSmartFutureBalance(balanceInput, userId, false);

    console.log(`[AI Automation] Successfully generated monthly data for user ${userId}`);
  } catch (error) {
    console.error(`[AI Automation] Error generating monthly data for user ${userId}:`, error);
  }
}

/**
 * Limpa dados antigos (manter apenas últimos 6 meses)
 */
export async function cleanupOldAIData(): Promise<void> {
  const { db } = await connectToDatabase();
  const sixMonthsAgo = new Date();
  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

  await db.collection('ai_generated_data').deleteMany({
    generatedAt: { $lt: sixMonthsAgo }
  });

  console.log('[AI Automation] Cleaned up old AI data');
}
