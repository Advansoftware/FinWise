// src/examples/hexagonal-architecture-usage.ts
// Este arquivo demonstra como usar a nova arquitetura hexagonal

import { getDatabaseAdapter, getAuthService, getDatabaseType } from '@/core/services/service-factory';

// Exemplo 1: Usando o Database Adapter
async function exemploUsoDatabaseAdapter() {
  console.log(`üîß Tipo de banco configurado: ${getDatabaseType()}`);

  // Obt√©m o adapter de banco de dados (Firebase ou MongoDB baseado no .env)
  const db = await getDatabaseAdapter();

  // Agora voc√™ pode usar qualquer reposit√≥rio independente do banco
  const users = await db.users.findById('123');
  const transactions = await db.transactions.findByUserId('123');
  const wallets = await db.wallets.findByUserId('123');

  console.log('Usu√°rio:', users);
  console.log('Transa√ß√µes:', transactions.length);
  console.log('Carteiras:', wallets.length);
}

// Exemplo 2: Usando o Auth Service
async function exemploUsoAuthService() {
  const auth = await getAuthService();

  // Login funciona igual independente do provider (Firebase ou MongoDB)
  const loginResult = await auth.signIn({
    email: 'user@example.com',
    password: 'password123'
  });

  if (loginResult.success) {
    console.log('Login realizado com sucesso:', loginResult.user);

    // Obter usu√°rio atual
    const currentUser = await auth.getCurrentUser();
    console.log('Usu√°rio atual:', currentUser);
  } else {
    console.error('Erro no login:', loginResult.error);
  }
}

// Exemplo 3: Criando uma transa√ß√£o (independente do banco)
async function exemploCreateTransaction() {
  const db = await getDatabaseAdapter();

  const novaTransacao = await db.transactions.create({
    userId: '123',
    date: new Date().toISOString(),
    item: 'Compra de exemplo',
    category: 'Restaurante',
    subcategory: 'Almo√ßo',
    amount: -25.50,
    quantity: 1,
    establishment: 'Restaurante do Jo√£o',
    type: 'expense',
    walletId: 'wallet-123'
  });

  console.log('Transa√ß√£o criada:', novaTransacao);
}

// Exemplo 4: Usando transa√ß√µes de banco (para opera√ß√µes at√¥micas)
async function exemploTransacaoBanco() {
  const db = await getDatabaseAdapter();

  // Executa m√∫ltiplas opera√ß√µes de forma at√¥mica
  await db.withTransaction(async () => {
    // Criar transa√ß√£o
    await db.transactions.create({
      userId: '123',
      date: new Date().toISOString(),
      item: 'Transfer√™ncia',
      category: 'Transfer√™ncia',
      subcategory: 'Entre contas',
      amount: -100,
      quantity: 1,
      establishment: 'Transfer√™ncia interna',
      type: 'transfer',
      walletId: 'wallet-origem'
    });

    // Atualizar saldo da carteira de origem
    await db.wallets.updateBalance('wallet-origem', -100);

    // Atualizar saldo da carteira de destino
    await db.wallets.updateBalance('wallet-destino', 100);
  });

  console.log('Transfer√™ncia realizada com sucesso!');
}

// Exemplo 5: Como alternar entre bancos via .env
/*
Para alternar entre Firebase e MongoDB, basta mudar a vari√°vel no .env:

=== Para usar Firebase ===
DATABASE_TYPE=firebase

=== Para usar MongoDB ===
DATABASE_TYPE=mongodb
MONGODB_URI=mongodb://localhost:27017
MONGODB_DB=finwise

N√£o √© necess√°rio alterar nenhum c√≥digo da aplica√ß√£o!
O service factory automaticamente carrega o adapter correto.
*/

export {
  exemploUsoDatabaseAdapter,
  exemploUsoAuthService,
  exemploCreateTransaction,
  exemploTransacaoBanco
};
